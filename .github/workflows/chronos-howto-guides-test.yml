name: Chronos Tests for How-to Guides

# Cancel previous runs in the PR when you push new commits
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true
  
# Controls when the action will run. 
on:
  # Triggers the workflow on pull request events but only for the main branch
  pull_request:
    branches: [ main ]
    paths:
      - 'python/chronos/colab-notebook/howto/**'
      - '.github/workflows/chronos-howto-guides-test.yml'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  chronos-howto-guides-test:
    runs-on: [ self-hosted, Gondolin, ubuntu-20.04-lts ]
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7.10"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 8
        uses: ./.github/actions/jdk-setup-action
      - name: Set up Maven
        uses: ./.github/actions/maven-setup-action

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Run tests for Chronos How-to Guides
        shell: bash
        run: |
          conda remove -n chronos-howto-env -y --all
          conda create -n chronos-howto-env -y python==3.7.10 setuptools=58.0.4 -c ${GONDOLIN_CONDA_CHANNEL} --override-channels
          conda info -e
          source activate chronos-howto-env
          pip install nbmake ipykernel==5.5.6
          apt-get update
          apt-get install -y libgl1
          pip uninstall -y bigdl-friesian bigdl-friesian-spark3 bigdl-dllib bigdl-dllib-spark3 bigdl-orca pyspark bigdl-orca-spark3 bigdl-chronos bigdl-chronos-spark3 bigdl-nano bigdl-friesian bigdl-friesian-spark3
          wget https://raw.githubusercontent.com/analytics-zoo/BigDL/main/python/test/python-requirements/requirements-chronos-python-ut.txt -O ${{ github.workspace }}/requirements-chronos-python-ut.txt
          pip install -i ${GONDOLIN_PIP_MIRROR} --trusted-host ${GONDOLIN_TRUSTED_HOST} -r ${{ github.workspace }}/requirements-chronos-python-ut.txt
          bash python/dev/release_default_linux_spark246.sh default false false
          bash python/nano/dev/build_and_install.sh linux default false pytorch --force-reinstall --no-deps -U
          whl_name=`ls python/nano/dist/`
          pip install python/nano/dist/${whl_name}[tensorflow,pytorch,inference]
          pip install python/dllib/src/dist/bigdl_dllib-*-py3-none-manylinux1_x86_64.whl
          pip install python/orca/src/dist/bigdl_orca-*-py3-none-manylinux1_x86_64.whl
          whl_name=`ls python/chronos/src/dist/`
          pip install python/chronos/src/dist/${whl_name}[pytorch,automl,distributed]
          export SPARK_LOCAL_HOSTNAME=localhost
          export KERAS_BACKEND=tensorflow
          bash python/chronos/dev/test/run-pytests-howto-guides.sh
          source deactivate
          conda remove -n chronos-howto-env --all
        env:
          BIGDL_ROOT: ${{ github.workspace }}
          ANALYTICS_ZOO_ROOT: ${{ github.workspace }}

      - name: Run tests for Chronos-benchmark-tool
        shell: bash
        run: |
          if conda info --env | grep "chronos-benchmakr-tool-env"; then
            source deactivate
            conda remove -n chronos-benchmakr-tool-env -y --all
          fi
          conda create -n chronos-benchmakr-tool-env -y python==3.7.10 setuptools==58.0.4 -c ${GONDOLIN_CONDA_CHANNEL} --override-channels
          source activate chronos-benchmakr-tool-env
          pip install pytest==5.4.1
          pip install prophet==1.1
          pip install pmdarima==1.8.4
          pip install tsfresh==0.17.0
          pip install ray==1.9.2 ray[tune]==1.9.2 ray[default]==1.9.2
          pip install pyarrow==6.0.1
          pip install ConfigSpace==0.5.0
          pip install optuna==2.10.1
          pip install neural-compressor==1.11
          pip install onnxruntime==1.11.1
          pip install onnx==1.11.0
          pip install onnxruntime-extensions==0.4.2
          pip install onnxsim==0.4.8
          pip install scipy==1.5.4
          pip install cloudpickle
          apt-get update
          apt-get install patchelf
          pip uninstall -y bigdl-friesian bigdl-friesian-spark3 bigdl-dllib bigdl-dllib-spark3 bigdl-orca pyspark bigdl-orca-spark3 bigdl-chronos bigdl-chronos-spark3 bigdl-nano bigdl-friesian bigdl-friesian-spark3
          sed -i "s/pyspark==2.4.6/pyspark==3.1.3/g" python/dllib/src/setup.py
          bash python/dev/release_default_linux_spark313.sh default false false
          bash python/nano/dev/build_and_install.sh linux default false pytorch --force-reinstall --no-deps -U
          whl_name=`ls python/nano/dist/`
          pip install python/nano/dist/${whl_name}[tensorflow,pytorch]
          pip install  python/dllib/src/dist/bigdl_dllib_*-py3-none-manylinux1_x86_64.whl
          pip install  python/orca/src/dist/bigdl_orca_*-py3-none-manylinux1_x86_64.whl
          pip install  python/chronos/src/dist/bigdl_chronos_*-py3-none-manylinux1_x86_64.whl
          export SPARK_LOCAL_HOSTNAME=localhost
          export KERAS_BACKEND=tensorflow
          export PYTHONPATH=$PYTHONPATH:/home/user/wangning/BigDL/python/chronos/src/
          bash python/chronos/dev/test/run-benchmark-tool.sh
          source deactivate
          conda remove -n chronos-benchmakr-tool-env -y --all
        env:
          BIGDL_ROOT: ${{ github.workspace }}
          ANALYTICS_ZOO_ROOT: ${{ github.workspace }}
          