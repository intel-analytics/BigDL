name: Nightly Build Docker Publish BigDL-PPML

on:
  workflow_dispatch:
    inputs:
      artifact:
        description: 'select which job to run("ALL" will make all jobs run)'
        required: true
        default: 'latest'
        type: choice
        options:
        - all
        - bigdl-ppml-trusted-big-data-ml-python-gramine
        - bigdl-ppml-trusted-big-data-ml-python-graphene
        - bigdl-ppml-trusted-realtime-ml-scala-graphene
        - bigdl-ppml-trusted-big-data-ml-scala-occlum
        - bigdl-ppml-trusted-realtime-ml-scala-occlum
      tag:
        description: 'e.g. 2.1.0-SNAPSHOT'
        required: true
        default: 'latest'
        type: string
  

jobs:
  docker-publish-ppml:
    runs-on: [self-hosted, Shire]
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3
    - name: docker login
      run: |
        docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}
    - name: Set the variable
      env:
        DEFAULT_TAG: 'latest'
        DEFAULT_ARTIFACT: 'all'
      run: |
        echo "TAG=${{ github.event.inputs.tag || env.DEFAULT_TAG }} " >> $GITHUB_ENV
        echo "ARTIFACT=${{ github.event.inputs.artifact || env.DEFAULT_ARTIFACT }}" >> $GITHUB_ENV
    - name: bigdl-ppml-trusted-big-data-ml-python-gramine
      run: |
        if [ "$ARTIFACT" = "bigdl-ppml-trusted-big-data-ml-python-gramine" ] || [ "$ARTIFACT" = "ALL" ] ; then
        echo "########################################"
        echo "####### big-data-ml-python-gramine ####"
        echo "########################################"
        cd ppml/trusted-big-data-ml/python/docker-gramine
        export image=intelanalytics/bigdl-ppml-trusted-big-data-ml-python-gramine
        sudo docker build \
          --no-cache=true \
          --build-arg http_proxy=${HTTP_PROXY} \
          --build-arg https_proxy=${HTTPS_PROXY} \
          --build-arg HTTP_PROXY_HOST=${HTTP_PROXY_HOST_2} \
          --build-arg HTTP_PROXY_PORT=${HTTP_PROXY_PORT_2} \
          --build-arg HTTPS_PROXY_HOST=${HTTP_PROXY_HOST_2} \
          --build-arg HTTPS_PROXY_PORT=${HTTP_PROXY_PORT_3} \
          --build-arg JDK_VERSION=8u192 \
          --build-arg JDK_URL=${JDK_URL} \
          --build-arg no_proxy=${NO_PROXY} \
          --build-arg SPARK_JAR_REPO_URL=${SPARK_JAR_REPO_URL} \
          -t ${image}:${TAG} -f ./Dockerfile .
        sudo docker tag ${image}:${TAG} 10.239.45.10/arda/${image}:${TAG}
        sudo docker push 10.239.45.10/arda/${image}:${TAG}
        sudo docker rmi -f ${image}:${TAG}
        fi
    - name: bigdl-ppml-trusted-big-data-ml-python-graphene
      run: |
        if [[ "$ARTIFACT" == bigdl-ppml-trusted-big-data-ml-python-graphene || "$ARTIFACT" == all ]]; then
        echo "########################################"
        echo "####### big-data-ml-python-graphene ####"
        echo "########################################"
        cd ppml/trusted-big-data-ml/python/docker-graphene
        export image=intelanalytics/bigdl-ppml-trusted-big-data-ml-python-graphene
        sudo docker build \
          --no-cache=true \
          --build-arg http_proxy=${HTTP_PROXY} \
          --build-arg https_proxy=${HTTPS_PROXY} \
          --build-arg HTTP_PROXY_HOST=${HTTP_PROXY_HOST_2} \
          --build-arg HTTP_PROXY_PORT=${HTTP_PROXY_PORT_2} \
          --build-arg HTTPS_PROXY_HOST=${HTTP_PROXY_HOST_2} \
          --build-arg HTTPS_PROXY_PORT=${HTTP_PROXY_PORT_3} \
          --build-arg JDK_VERSION=8u192 \
          --build-arg JDK_URL=${JDK_URL} \
          --build-arg no_proxy=${NO_PROXY} \
          --build-arg SPARK_JAR_REPO_URL=${SPARK_JAR_REPO_URL} \
          -t ${image}:${TAG} -f ./Dockerfile .
        sudo docker tag ${image}:${TAG} 10.239.45.10/arda/${image}:${TAG}
        sudo docker push 10.239.45.10/arda/${image}:${TAG}
        sudo docker rmi -f ${image}:${TAG}
        fi
    - name: bigdl-ppml-trusted-realtime-ml-scala-graphene
      run: |
        if [[ "$ARTIFACT" == bigdl-ppml-trusted-realtime-ml-scala-graphene || "$ARTIFACT" == all ]]; then
        echo "########################################"
        echo "####### realtime-ml-scala-graphene #####"
        echo "########################################"
        cd ppml/trusted-realtime-ml/scala/docker-graphene/
        export image=intelanalytics/bigdl-ppml-trusted-realtime-ml-scala-graphene
        pwd
        docker build \
          --no-cache=true \
          --build-arg http_proxy=${HTTP_PROXY} \
          --build-arg https_proxy=${HTTPS_PROXY} \
          --build-arg HTTP_PROXY_HOST=${HTTP_PROXY_HOST_2} \
          --build-arg HTTP_PROXY_PORT=${HTTP_PROXY_PORT_2} \
          --build-arg HTTPS_PROXY_HOST=${HTTP_PROXY_HOST_2} \
          --build-arg HTTPS_PROXY_PORT=${HTTP_PROXY_PORT_3} \
          --build-arg JDK_VERSION=8u192 \
          --build-arg JDK_URL=${JDK_URL} \
          --build-arg no_proxy=${NO_PROXY} \
          --build-arg SPARK_JAR_REPO_URL=${SPARK_JAR_REPO_URL} \
          -t ${image}:${TAG} -f ./Dockerfile .
        docker tag ${image}:${TAG} 10.239.45.10/arda/${image}:${TAG}
        docker push 10.239.45.10/arda/${image}:${TAG}
        docker rmi -f ${image}:${TAG}
        fi
    - name: bigdl-ppml-trusted-big-data-ml-scala-occlum
      run: |
        if [[ "$ARTIFACT" == bigdl-ppml-trusted-big-data-ml-scala-occlum || "$ARTIFACT" == all ]]; then
        echo "########################################"
        echo "####### big-data-ml-scala-occlum  ######"
        echo "########################################"
        cd ppml/trusted-big-data-ml/scala/docker-occlum/
        export image=intelanalytics/bigdl-ppml-trusted-big-data-ml-scala-occlum
        pwd
        docker build \
          --no-cache=true \
          --build-arg http_proxy=${HTTP_PROXY} \
          --build-arg https_proxy=${HTTPS_PROXY} \
          --build-arg HTTP_PROXY_HOST=${HTTP_PROXY_HOST_2} \
          --build-arg HTTP_PROXY_PORT=${HTTP_PROXY_PORT_2} \
          --build-arg HTTPS_PROXY_HOST=${HTTP_PROXY_HOST_2} \
          --build-arg HTTPS_PROXY_PORT=${HTTP_PROXY_PORT_3} \
          --build-arg JDK_VERSION=8u192 \
          --build-arg JDK_URL=${JDK_URL} \
          --build-arg no_proxy=${NO_PROXY} \
          --build-arg SPARK_JAR_REPO_URL=${SPARK_JAR_REPO_URL} \
          -t ${image}:${TAG} -f ./Dockerfile .
        docker tag ${image}:${TAG} 10.239.45.10/arda/${image}:${TAG}
        docker push 10.239.45.10/arda/${image}:${TAG}
        docker rmi -f ${image}:${TAG}
        fi
    - name: bigdl-ppml-trusted-realtime-ml-scala-occlum
      run: |
        if [[ "$ARTIFACT" == bigdl-ppml-trusted-realtime-ml-scala-occlum || "$ARTIFACT" == all ]]; then
        echo "########################################"
        echo "####### realtime-ml-scala-occlum  ######"
        echo "########################################"
        cd ppml/trusted-realtime-ml/scala/docker-occlum/
        export image=intelanalytics/bigdl-ppml-trusted-realtime-ml-scala-occlum
        pwd
        docker build \
          --no-cache=true \
          --build-arg http_proxy=${HTTP_PROXY} \
          --build-arg https_proxy=${HTTPS_PROXY} \
          --build-arg HTTP_PROXY_HOST=${HTTP_PROXY_HOST_2} \
          --build-arg HTTP_PROXY_PORT=${HTTP_PROXY_PORT_2} \
          --build-arg HTTPS_PROXY_HOST=${HTTP_PROXY_HOST_2} \
          --build-arg HTTPS_PROXY_PORT=${HTTP_PROXY_PORT_3} \
          --build-arg JDK_VERSION=8u192 \
          --build-arg JDK_URL=${JDK_URL} \
          --build-arg no_proxy=${NO_PROXY} \
          --build-arg SPARK_JAR_REPO_URL=${SPARK_JAR_REPO_URL} \
          -t ${image}:${TAG} -f ./Dockerfile .
        docker tag ${image}:${TAG} 10.239.45.10/arda/${image}:${TAG}
        docker push 10.239.45.10/arda/${image}:${TAG}
        docker rmi -f ${image}:${TAG}
        fi

    - name: "Set time variable"
      run: |
        export NOW=$( date '+%F_%H:%M:%S' )
        echo "TIME=${NOW}" >> $GITHUB_ENV
        
    - name: "Create Badge"
      uses: schneegans/dynamic-badges-action@v1.4.0
      with:
        auth: ${{ secrets.GIST_KEY }}
        gistID: 321729bb9742e98b6008f09f5af42a2a
        filename: docker-publish-ppml.json
        label: Time
        message: is ${{ env.TIME }}
        valColorRange: ${{ env.TIME }}
        maxColorRange: 100
        minColorRange: 0