name: Nightly Build

on:
  pull_request:
    branches: main
  schedule:
    - cron: '0 17 * * *'
  workflow_dispatch:
    inputs:
      artifact:
        description: 'select which job to run("all" will make all jobs run)'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - scala
        - python
        - python-sourceforge
        - docker-bigdl
        - docker-bigdl-ppml-trusted-big-data-ml-python-gramine
        - docker-bigdl-ppml-trusted-big-data-ml-python-graphene
        - docker-bigdl-ppml-trusted-realtime-ml-scala-graphene
        - docker-bigdl-ppml-trusted-big-data-ml-scala-occlum
        - docker-bigdl-ppml-trusted-realtime-ml-scala-occlum
        - docker-kms
      bigdlTag:
        description: 'e.g. 2.1.0-SNAPSHOT'
        required: true
        default: 'latest'
        type: string
      bigdlPpmlTag:
        description: 'e.g. 2.1.0-SNAPSHOT'
        required: true
        default: 'latest'
        type: string
      kmsTag:
        description: 'e.g. 0.3.0'
        required: true
        default: '0.3.0'
        type: string

permissions:
  contents: read
  packages: write

jobs:

  scala-build:
#     if: ${{ github.event.inputs.artifact == 'scala' || github.event.inputs.artifact == 'all' }}
    runs-on: [self-hosted, Linux, Bree]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK8
      uses: ./.github/actions/jdk-setup-action

    - uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: maven-
          
    - name: Create Job Badge
      uses: ./.github/actions/create-job-status-badge
      if: ${{ always() }}
      with:
        secret: ${{ secrets.GIST_SECRET }}
        gist-id: 7495dccc42118020c12de5a095cfa2a6
        file-name: nb-scala-build.json
        

  docker-build-bigdl:
    needs: scala-build
#     if: ${{ github.event.inputs.artifact == 'bigdl' || github.event.inputs.artifact == 'all' }} 
    runs-on: [self-hosted, Shire]

    steps:
    - uses: actions/checkout@v3
    - name: set env
      env:
        DEFAULT_TAG: 'latest'
      run: |
        echo "TAG=${{ github.event.inputs.bigdlTag || env.DEFAULT_TAG }} " >> $GITHUB_ENV
    - name: docker login
      run: |
        docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}
    
    - name: Create Job Badge
      if: ${{ always() }}
      uses: ./.github/actions/create-job-status-badge
      with:
        secret: ${{ secrets.GIST_SECRET }}
        gist-id: aaee1abb17ed9aad37e19256787c52b2
        file-name: nb-docker-build-bigdl.json
  
  docker-build-ppml:
    needs: scala-build
    if: ${{ !github.event.schedule && (github.event.inputs.artifact == 'docker-bigdl-ppml-trusted-big-data-ml-python-gramine' || github.event.inputs.artifact == 'docker-bigdl-ppml-trusted-big-data-ml-python-graphene' || github.event.inputs.artifact == 'docker-bigdl-ppml-trusted-realtime-ml-scala-graphene' || github.event.inputs.artifact == 'docker-bigdl-ppml-trusted-big-data-ml-scala-occlum' || github.event.inputs.artifact == 'docker-bigdl-ppml-trusted-realtime-ml-scala-occlum' || github.event.inputs.artifact == 'all') }}
    runs-on: [self-hosted, Shire]

    steps:
    - uses: actions/checkout@v3
    - name: docker login
      run: |
        docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}
    - name: Set the variable
      env:
        DEFAULT_TAG: 'latest'
        DEFAULT_ARTIFACT: 'all'
      run: |
        echo "TAG=${{ github.event.inputs.bigdlPpmlTag || env.DEFAULT_TAG }} " >> $GITHUB_ENV
        echo "ARTIFACT=${{ github.event.inputs.artifact || env.DEFAULT_ARTIFACT }}" >> $GITHUB_ENV
        
    - name: Create Job Badge
      if: ${{ always() }}
      uses: ./.github/actions/create-job-status-badge
      with:
        secret: ${{ secrets.GIST_SECRET }}
        gist-id: bc8a699b455bced4a1aef138ad5df07e
        file-name: nb-docker-build-ppml.json
  
  docker-build-kms:
    needs: scala-build
#     if: ${{ github.event.schedule == '0 17 * * 1' || github.event.inputs.artifact == 'docker-kms' || github.event.inputs.artifact == 'all' }}
    runs-on: [self-hosted, Shire]

    steps:
    - uses: actions/checkout@v3
    - name: Set the variable
      env:
        DEFAULT_TAG: '0.3.0'
      run: echo "TAG=${{ github.event.inputs.kmsTag || env.DEFAULT_TAG }}" >> $GITHUB_ENV
   
        
    - name: Create Job Badge
      if: ${{ always() }}
      uses: ./.github/actions/create-job-status-badge
      with:
        secret: ${{ secrets.GIST_SECRET }}
        gist-id: 966d4c0bf23c67662120d1bf4b1c88dc
        file-name: nb-docker-build-kms.json
    
  python-build:
#     if: ${{ github.event.inputs.artifact == 'python' || github.event.inputs.artifact == 'all' }} 
    runs-on: [self-hosted, ubuntu-20.04-lts, Bree]

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK8
      uses: ./.github/actions/jdk-setup-action

    - name: Set up maven
      uses: ./.github/actions/maven-setup-action

    - name: Set up Python 
      uses: actions/setup-python@v2
      with:
        python-version: '3.7'
        
    - name: Create Job Badge
      if: ${{ always() }}
      uses: ./.github/actions/create-job-status-badge
      with:
        secret: ${{ secrets.GIST_SECRET }}
        gist-id: 983672c70e351381418fdf6f9076637a
        file-name: nb-python-build.json

  python-build-sourceforge:
#     if: ${{ github.event.inputs.artifact == 'python-sourceforge' || github.event.inputs.artifact == 'all' }} 
    runs-on: [self-hosted,alpha,Bree,ubuntu-20.04-lts]

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK8
      uses: ./.github/actions/jdk-setup-action
    - name: Set up maven
      uses: ./.github/actions/maven-setup-action
    - name: Set up Python 
      uses: actions/setup-python@v2
      with:
        python-version: '3.7'
    
        
    - name: Create Job Badge
      if: ${{ always() }}
      uses: ./.github/actions/create-job-status-badge
      with:
        secret: ${{ secrets.GIST_SECRET }}
        gist-id: 6d878630c0c8f50c388bb7e196354ca8
        file-name: nb-python-sourceforge-build.json




