name: Nightly Build UT Scala Friesian

on:
  push:
    paths:
      - 'scala/friesian/**'
      - '.github/workflows/nb-ut-scala-friesian.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'scala/friesian/**'
      - '.github/workflows/nb-ut-scala-friesian.yml'
  workflow_dispatch:
  workflow_call:
  schedule:
    - cron: '0 15 * * *'

jobs:
  friesian-maven-test:
    runs-on: [ self-hosted, ubuntu-20.04, CLX, AVX512, Ettenmoors, docker ]
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: "8"
          distribution: "temurin"
          #server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.4
        with:
          maven-version: 3.8.2

      - name: Set up Maven Settings
        uses: s4u/maven-settings-action@v2.6.0
        with:
          sonatypeSnapshots: true
          apacheSnapshots: true
          servers: |
            [{
              "id": "central",
              "configuration": {
                "httpConfiguration": {
                  "all": {
                    "connectionTimeout": "3600000",
                    "readTimeout": "3600000"
                    }
                  }
                }
            }]
          mirrors: '[{"id": "ardaNexus", "name": "ardaNexus", "mirrorOf": "*", "url": "${NEXUS_URL}" }]'

      - name: Set up redis
        run: |
          curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/redis.list
          export http_proxy="http://child-prc.intel.com:913/"
          export https_proxy="http://child-prc.intel.com:913/"
          apt-get update
          apt-get install -y redis redis-tools
          redis-server --daemonize yes
          redis-cli ping

      - name: Set up mkl
        run: |
          apt update && apt install -y --force-yes apt-transport-https && \
          wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB && \
          apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB && \
          sh -c 'echo deb https://apt.repos.intel.com/mkl all main > /etc/apt/sources.list.d/intel-mkl.list' && \
          apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -y install cpio intel-mkl-64bit-2018.3-051 && \
          (find /opt/intel -name "ia32*" -exec rm -rf {} \; || echo "removing ia32 binaries") ; \
          (find /opt/intel -name "examples" -type d -exec rm -rf {} \; || echo "removing examples") ; \
          (find /opt/intel -name "benchmarks" -exec rm -rf {} \; || echo "removing benchmarks") ; \
          (find /opt/intel -name "documentation*" -exec rm -rf {} \; || echo "removing documentation") ; \
          (rm -rf /opt/intel/mkl/interfaces ) ; \
          (rm -rf /opt/intel/mkl/lib/intel64/*.a ) ; \
          (rm -rf /opt/intel/mkl/lib/intel64/*mpi*.so ) ; \
          (rm -rf /opt/intel/mkl/lib/intel64/*tbb*.so ) ; \
          (rm -rf /opt/intel/mkl/lib/intel64/*pgi*.so ) ; \
          (rm -rf /opt/intel/mkl/lib/intel64/*mc*.so ) ; \
          (rm -rf /opt/intel/mkl/lib/intel64/*blacs*.so ) ; \
          (rm -rf /opt/intel/mkl/lib/intel64/*scalapack*.so ) ; \
          (rm -rf /opt/intel/mkl/lib/intel64/*gf*.so ) ; \
          (rm -rf /opt/intel/mkl/lib/intel64/*mic*.so ) ; \
          apt purge intel-tbb* intel-psxe* && \
          apt-get clean autoclean && \
          apt-get autoremove -y && \
          ln -s -f bash /bin/sh && \
          rm -rf /usr/share/doc && \
          echo "/opt/intel/mkl/lib/intel64" >> /etc/ld.so.conf.d/intel.conf && \
          ldconfig && \
          echo "source /opt/intel/mkl/bin/mklvars.sh intel64" >> /etc/bash.bashrc
          
          update-alternatives --install /usr/lib/x86_64-linux-gnu/libblas.so  \
          libblas.so-x86_64-linux-gnu      /opt/intel/mkl/lib/intel64/libmkl_rt.so 50 && \
          update-alternatives --install /usr/lib/x86_64-linux-gnu/libblas.so.3  \
          libblas.so.3-x86_64-linux-gnu    /opt/intel/mkl/lib/intel64/libmkl_rt.so 50 && \
          update-alternatives --install /usr/lib/x86_64-linux-gnu/liblapack.so   \
          liblapack.so-x86_64-linux-gnu    /opt/intel/mkl/lib/intel64/libmkl_rt.so 50 && \
          update-alternatives --install /usr/lib/x86_64-linux-gnu/liblapack.so.3 \
          liblapack.so.3-x86_64-linux-gnu  /opt/intel/mkl/lib/intel64/libmkl_rt.so 50 && \
          echo "/opt/intel/lib/intel64"     >  /etc/ld.so.conf.d/mkl.conf && \
          echo "/opt/intel/mkl/lib/intel64" >> /etc/ld.so.conf.d/mkl.conf && \
          ldconfig && \
          echo "MKL_THREADING_LAYER=GNU" >> /etc/environment

      - name: Prepare data
        run: |
          mkdir -p /tmp/friesian-unittest
          cd /tmp/friesian-unittest
          curl -O http://10.239.45.10:8081/repository/raw/analytics-zoo-data/friesian-serving-upload.tar.gz 
          tar -zxf friesian-serving-upload.tar.gz

      - name: Run tests
        run: |
          export SPARK_LOCAL_HOSTNAME=localhost
          export KERAS_BACKEND=tensorflow
          cd scala
          mvn "-DwildcardSuites=com.intel.analytics.bigdl.friesian" "-Dtest=com.intel.analytics.bigdl.friesian.*Test" test -P spark_2.x -Dspark.version=2.4.6 "-Dspark.master=local[*]"
