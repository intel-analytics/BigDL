name: LLM Unit Tests on Windows

# Cancel previous runs in the PR when you push new commits
concurrency:
  group: ${{ github.workflow }}-llm-win-unittest-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
    paths:
      - 'python/llm/**'
      - '.github/workflows/llm_unit_tests_windows.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'python/llm/**'
      - '.github/workflows/llm_unit_tests_windows.yml'
  workflow_dispatch:

env:
  INT4_CKPT_DIR: ./llm/ggml-actions/stable
  LLAMA_INT4_CKPT_PATH: ./llm/ggml-actions/stable/bigdl_llm_llama_7b_q4_0.bin
  GPTNEOX_INT4_CKPT_PATH: ./llm/ggml-actions/stable/bigdl_llm_redpajama_7b_q4_0.bin
  BLOOM_INT4_CKPT_PATH: ./llm/ggml-actions/stable/bigdl_llm_bloom_7b_q4_0.bin
  STARCODER_INT4_CKPT_PATH: ./llm/ggml-actions/stable/bigdl_llm_santacoder_1b_q4_0.bin

  LLM_DIR: ./llm
  ORIGINAL_CHATGLM2_6B_PATH: ./llm/chatglm2-6b/

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  llm-cpp-build:
    uses: ./.github/workflows/llm-binary-build.yml
  llm-unit-test-windows:
    runs-on: ${{ matrix.os }}
    needs: llm-cpp-build
    strategy:
      fail-fast: false
      matrix:
        os: ["windows-latest"]
        python-version: ["3.9"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools==58.0.4
          python -m pip install --upgrade wheel
      - name: Download llm binary
        uses: ./.github/actions/llm/download-llm-binary
      - name: Run LLM-init test
        shell: bash
        run: |
          pip install requests
          bash python/llm/dev/release_default_windows.sh default false
          pip install -i https://pypi.python.org/simple python/llm/dist/bigdl_llm*.whl
        env:
          ANALYTICS_ZOO_ROOT: ${{ github.workspace }}
      
      - name: Run LLM install (all) test
        shell: bash
        run: |
          pip install requests
          bash python/llm/dev/release_default_windows.sh default false
          whl_name=$(ls python/llm/dist)
          pip install -i https://pypi.python.org/simple "python/llm/dist/${whl_name}[all]"
          pip install pytest
          bash python/llm/test/run-llm-install-tests.sh
        env:
          ANALYTICS_ZOO_ROOT: ${{ github.workspace }}

      - name: Download ckpt & original models
        run: |
          if [ ! -d $LLAMA_INT4_CKPT_PATH ]; then
            echo "Directory $LLAMA_INT4_CKPT_PATH not found. Downloading from FTP server..."
            wget --no-verbose $LLM_FTP_URL/${LLAMA_INT4_CKPT_PATH:2} -P $INT4_CKPT_DIR
          fi
          if [ ! -d $GPTNEOX_INT4_CKPT_PATH ]; then
            echo "Directory $GPTNEOX_INT4_CKPT_PATH not found. Downloading from FTP server..."
            wget --no-verbose $LLM_FTP_URL/${GPTNEOX_INT4_CKPT_PATH:2} -P $INT4_CKPT_DIR
          fi
          if [ ! -d $BLOOM_INT4_CKPT_PATH ]; then
            echo "Directory $BLOOM_INT4_CKPT_PATH not found. Downloading from FTP server..."
            wget --no-verbose $LLM_FTP_URL/${BLOOM_INT4_CKPT_PATH:2} -P $INT4_CKPT_DIR
          fi
          if [ ! -d $STARCODER_INT4_CKPT_PATH ]; then
            echo "Directory $STARCODER_INT4_CKPT_PATH not found. Downloading from FTP server..."
            wget --no-verbose $LLM_FTP_URL/${STARCODER_INT4_CKPT_PATH:2} -P $INT4_CKPT_DIR
          fi
          if [ ! -d $ORIGINAL_CHATGLM2_6B_PATH ]; then
            echo "Directory $ORIGINAL_CHATGLM2_6B_PATH not found. Downloading from FTP server..."
            wget -r -nH --no-verbose --cut-dirs=1 $LLM_FTP_URL/${ORIGINAL_CHATGLM2_6B_PATH:2} -P $LLM_DIR
          fi

      - name: Run LLM unittests
        shell: bash
        run: |
          pip install pytest pydantic
          pip install -U langchain==0.0.184
          pip install -U chromadb==0.3.25
          pip install -U typing_extensions==4.5.0
          bash python/llm/test/run-llm-windows-tests.sh
        env:
          ANALYTICS_ZOO_ROOT: ${{ github.workspace }}

      - name: Clean up
        shell: bash
        run: |
          rm -rf models
