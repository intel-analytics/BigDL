# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import nn_service_pb2 as nn__service__pb2
from bigdl.dllib.utils.log4Error import invalidInputError


class NNServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.train = channel.unary_unary(
                '/nn.NNService/train',
                request_serializer=nn__service__pb2.TrainRequest.SerializeToString,
                response_deserializer=nn__service__pb2.TrainResponse.FromString,
                )
        self.evaluate = channel.unary_unary(
                '/nn.NNService/evaluate',
                request_serializer=nn__service__pb2.EvaluateRequest.SerializeToString,
                response_deserializer=nn__service__pb2.EvaluateResponse.FromString,
                )
        self.predict = channel.unary_unary(
                '/nn.NNService/predict',
                request_serializer=nn__service__pb2.PredictRequest.SerializeToString,
                response_deserializer=nn__service__pb2.PredictResponse.FromString,
                )
        self.upload_model = channel.unary_unary(
                '/nn.NNService/upload_model',
                request_serializer=nn__service__pb2.UploadModelRequest.SerializeToString,
                response_deserializer=nn__service__pb2.UploadModelResponse.FromString,
                )


class NNServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def train(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        invalidInputError(False, 'Method not implemented!')

    def evaluate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        invalidInputError(False, 'Method not implemented!')

    def predict(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        invalidInputError(False, 'Method not implemented!')

    def upload_model(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        invalidInputError(False, 'Method not implemented!')


def add_NNServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'train': grpc.unary_unary_rpc_method_handler(
                    servicer.train,
                    request_deserializer=nn__service__pb2.TrainRequest.FromString,
                    response_serializer=nn__service__pb2.TrainResponse.SerializeToString,
            ),
            'evaluate': grpc.unary_unary_rpc_method_handler(
                    servicer.evaluate,
                    request_deserializer=nn__service__pb2.EvaluateRequest.FromString,
                    response_serializer=nn__service__pb2.EvaluateResponse.SerializeToString,
            ),
            'predict': grpc.unary_unary_rpc_method_handler(
                    servicer.predict,
                    request_deserializer=nn__service__pb2.PredictRequest.FromString,
                    response_serializer=nn__service__pb2.PredictResponse.SerializeToString,
            ),
            'upload_model': grpc.unary_unary_rpc_method_handler(
                    servicer.upload_model,
                    request_deserializer=nn__service__pb2.UploadModelRequest.FromString,
                    response_serializer=nn__service__pb2.UploadModelResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nn.NNService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NNService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def train(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nn.NNService/train',
            nn__service__pb2.TrainRequest.SerializeToString,
            nn__service__pb2.TrainResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def evaluate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nn.NNService/evaluate',
            nn__service__pb2.EvaluateRequest.SerializeToString,
            nn__service__pb2.EvaluateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def predict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nn.NNService/predict',
            nn__service__pb2.PredictRequest.SerializeToString,
            nn__service__pb2.PredictResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def upload_model(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nn.NNService/upload_model',
            nn__service__pb2.UploadModelRequest.SerializeToString,
            nn__service__pb2.UploadModelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
