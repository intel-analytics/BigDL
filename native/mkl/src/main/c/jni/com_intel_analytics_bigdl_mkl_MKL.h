/*
 * Licensed to Intel Corporation under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * Intel Corporation licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_intel_analytics_bigdl_mkl_MKL */

#ifndef _Included_com_intel_analytics_bigdl_mkl_MKL
#define _Included_com_intel_analytics_bigdl_mkl_MKL
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    setNumThreads
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_setNumThreads
  (JNIEnv *, jclass, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vsAdd
 * Signature: (I[FI[FI[FI)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vsAdd
  (JNIEnv *, jclass, jint, jfloatArray, jint, jfloatArray, jint, jfloatArray, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vdAdd
 * Signature: (I[DI[DI[DI)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vdAdd
  (JNIEnv *, jclass, jint, jdoubleArray, jint, jdoubleArray, jint, jdoubleArray, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vsSub
 * Signature: (I[FI[FI[FI)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vsSub
  (JNIEnv *, jclass, jint, jfloatArray, jint, jfloatArray, jint, jfloatArray, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vdSub
 * Signature: (I[DI[DI[DI)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vdSub
  (JNIEnv *, jclass, jint, jdoubleArray, jint, jdoubleArray, jint, jdoubleArray, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vsMul
 * Signature: (I[FI[FI[FI)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vsMul
  (JNIEnv *, jclass, jint, jfloatArray, jint, jfloatArray, jint, jfloatArray, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vdMul
 * Signature: (I[DI[DI[DI)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vdMul
  (JNIEnv *, jclass, jint, jdoubleArray, jint, jdoubleArray, jint, jdoubleArray, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vsDiv
 * Signature: (I[FI[FI[FI)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vsDiv
  (JNIEnv *, jclass, jint, jfloatArray, jint, jfloatArray, jint, jfloatArray, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vdDiv
 * Signature: (I[DI[DI[DI)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vdDiv
  (JNIEnv *, jclass, jint, jdoubleArray, jint, jdoubleArray, jint, jdoubleArray, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vsPowx
 * Signature: (I[FIF[FI)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vsPowx
  (JNIEnv *, jclass, jint, jfloatArray, jint, jfloat, jfloatArray, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vdPowx
 * Signature: (I[DID[DI)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vdPowx
  (JNIEnv *, jclass, jint, jdoubleArray, jint, jdouble, jdoubleArray, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vsLn
 * Signature: (I[FI[FI)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vsLn
  (JNIEnv *, jclass, jint, jfloatArray, jint, jfloatArray, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vdLn
 * Signature: (I[DI[DI)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vdLn
  (JNIEnv *, jclass, jint, jdoubleArray, jint, jdoubleArray, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vsExp
 * Signature: (I[FI[FI)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vsExp
  (JNIEnv *, jclass, jint, jfloatArray, jint, jfloatArray, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vdExp
 * Signature: (I[DI[DI)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vdExp
  (JNIEnv *, jclass, jint, jdoubleArray, jint, jdoubleArray, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vsSqrt
 * Signature: (I[FI[FI)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vsSqrt
  (JNIEnv *, jclass, jint, jfloatArray, jint, jfloatArray, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vdSqrt
 * Signature: (I[DI[DI)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vdSqrt
  (JNIEnv *, jclass, jint, jdoubleArray, jint, jdoubleArray, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vsLog1p
 * Signature: (I[FI[FI)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vsLog1p
  (JNIEnv *, jclass, jint, jfloatArray, jint, jfloatArray, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vdLog1p
 * Signature: (I[DI[DI)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vdLog1p
  (JNIEnv *, jclass, jint, jdoubleArray, jint, jdoubleArray, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vsAbs
 * Signature: (I[FI[FI)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vsAbs
  (JNIEnv *, jclass, jint, jfloatArray, jint, jfloatArray, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vdAbs
 * Signature: (I[DI[DI)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vdAbs
  (JNIEnv *, jclass, jint, jdoubleArray, jint, jdoubleArray, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vsgemm
 * Signature: (CCIIIF[FII[FIIF[FII)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vsgemm
  (JNIEnv *, jclass, jchar, jchar, jint, jint, jint, jfloat, jfloatArray, jint, jint, jfloatArray, jint, jint, jfloat, jfloatArray, jint, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vdgemm
 * Signature: (CCIIID[DII[DIID[DII)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vdgemm
  (JNIEnv *, jclass, jchar, jchar, jint, jint, jint, jdouble, jdoubleArray, jint, jint, jdoubleArray, jint, jint, jdouble, jdoubleArray, jint, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vsgemv
 * Signature: (CIIF[FII[FIIF[FII)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vsgemv
  (JNIEnv *, jclass, jchar, jint, jint, jfloat, jfloatArray, jint, jint, jfloatArray, jint, jint, jfloat, jfloatArray, jint, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vdgemv
 * Signature: (CIID[DII[DIID[DII)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vdgemv
  (JNIEnv *, jclass, jchar, jint, jint, jdouble, jdoubleArray, jint, jint, jdoubleArray, jint, jint, jdouble, jdoubleArray, jint, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vsaxpy
 * Signature: (IF[FII[FII)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vsaxpy
  (JNIEnv *, jclass, jint, jfloat, jfloatArray, jint, jint, jfloatArray, jint, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vdaxpy
 * Signature: (ID[DII[DII)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vdaxpy
  (JNIEnv *, jclass, jint, jdouble, jdoubleArray, jint, jint, jdoubleArray, jint, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vsdot
 * Signature: (I[FII[FII)F
 */
JNIEXPORT jfloat JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vsdot
  (JNIEnv *, jclass, jint, jfloatArray, jint, jint, jfloatArray, jint, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vddot
 * Signature: (I[DII[DII)D
 */
JNIEXPORT jdouble JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vddot
  (JNIEnv *, jclass, jint, jdoubleArray, jint, jint, jdoubleArray, jint, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vsger
 * Signature: (IIF[FII[FII[FII)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vsger
  (JNIEnv *, jclass, jint, jint, jfloat, jfloatArray, jint, jint, jfloatArray, jint, jint, jfloatArray, jint, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vdger
 * Signature: (IID[DII[DII[DII)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vdger
  (JNIEnv *, jclass, jint, jint, jdouble, jdoubleArray, jint, jint, jdoubleArray, jint, jint, jdoubleArray, jint, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vsscal
 * Signature: (IF[FII)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vsscal
  (JNIEnv *, jclass, jint, jfloat, jfloatArray, jint, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    vdscal
 * Signature: (ID[DII)V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_vdscal
  (JNIEnv *, jclass, jint, jdouble, jdoubleArray, jint, jint);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    getNumThreads
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_getNumThreads
  (JNIEnv *, jclass);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    getMklVersion
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_getMklVersion
  (JNIEnv *, jclass);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    getAffinity
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_getAffinity
  (JNIEnv *, jclass);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    setAffinity
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_setAffinity
  (JNIEnv *, jclass);

/*
 * Class:     com_intel_analytics_bigdl_mkl_MKL
 * Method:    release
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_intel_analytics_bigdl_mkl_MKL_release
  (JNIEnv *, jclass);

#ifdef __cplusplus
}
#endif
#endif
