/*
 * Licensed to Intel Corporation under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * Intel Corporation licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.intel.analytics.bigdl.models.fasterrcnn.layers

import com.intel.analytics.bigdl.models.fasterrcnn.model.{Phase, PvanetParam}
import com.intel.analytics.bigdl.tensor.{Storage, Tensor}
import com.intel.analytics.bigdl.utils.Table
import org.scalatest.{FlatSpec, Matchers}

class ProposalSpec extends FlatSpec with Matchers {
  "updateOutput" should "work properly" in {
    val param = new PvanetParam(Phase.TEST)
    val proposal = new Proposal(param.RPN_PRE_NMS_TOP_N,
      param.RPN_POST_NMS_TOP_N, param.anchorParam)
    val input = new Table()
    val clsProb = Tensor(Storage(Array(0.9345769, 0.7133355, 0.5493324, 0.7572652, 0.8856508,
      0.9497439, 0.9782529, 0.9880974, 0.9862041, 0.9867247,
      0.9776973, 0.9747916, 0.987829, 0.9958025, 0.998135,
      0.9962164, 0.9934915, 0.9906163, 0.8797625, 0.6244411,
      0.7485977, 0.937463, 0.9740775, 0.9699017, 0.9749987,
      0.9823676, 0.9792991, 0.9713318, 0.9882091, 0.9289108,
      0.8584636, 0.9727643, 0.9933025, 0.9963111, 0.9983228,
      0.9986396, 0.9958015, 0.9891385, 0.9845842, 0.9888032,
      0.9904448, 0.9914239, 0.9937477, 0.9965042, 0.9988783,
      0.9989511, 0.9991158, 0.9992889, 0.9995356, 0.9994979,
      0.9993908, 0.9990995, 0.8756195, 0.417037, 0.4314043,
      0.759385, 0.9161801, 0.9487265, 0.9803376, 0.9853867,
      0.9826697, 0.9858508, 0.9841393, 0.9865156, 0.9934808,
      0.997498, 0.9975806, 0.9924197, 0.9856687, 0.9741147,
      0.8263189, 0.5626017, 0.869288, 0.9659578, 0.9700627,
      0.9461327, 0.9390768, 0.9754994, 0.9323405, 0.8509173,
      0.9456869, 0.8881467, 0.7554463, 0.9069546, 0.9832319,
      0.9919653, 0.9982195, 0.9984492, 0.9915906, 0.9609554,
      0.9684019, 0.9857657, 0.9895773, 0.9896422, 0.9916244,
      0.9945406, 0.9981229, 0.9988758, 0.999185, 0.9993455,
      0.9996386, 0.9996176, 0.9995284, 0.9992266, 0.925329,
      0.7164307, 0.7911029, 0.8251675, 0.8885494, 0.9388475,
      0.9819376, 0.9870057, 0.9898764, 0.9912949, 0.9901131,
      0.9929222, 0.9973876, 0.9989401, 0.9986919, 0.9975513,
      0.9962775, 0.9938572, 0.9736211, 0.9592338, 0.9905951,
      0.9965341, 0.9941782, 0.9947514, 0.9937621, 0.9940097,
      0.9865083, 0.9704794, 0.9847339, 0.9816236, 0.9802045,
      0.9799727, 0.9867691, 0.9876922, 0.9969913, 0.9974704,
      0.9954547, 0.9949857, 0.9971681, 0.9974407, 0.9974226,
      0.9966775, 0.9970067, 0.9981737, 0.998958, 0.9992229,
      0.999516, 0.9995775, 0.9998088, 0.9998387, 0.9997907,
      0.9995438, 0.9487129, 0.7533657, 0.7837202, 0.7891701,
      0.9144855, 0.9587057, 0.9859998, 0.9899457, 0.9948742,
      0.9958178, 0.9967828, 0.9976585, 0.9985473, 0.9985994,
      0.9987848, 0.997451, 0.9975, 0.9945449, 0.9780578,
      0.9564968, 0.9952466, 0.9981956, 0.9971244, 0.9979748,
      0.9968175, 0.9948324, 0.9933943, 0.9908785, 0.9941255,
      0.9926641, 0.9914303, 0.9808261, 0.9505344, 0.9608235,
      0.9912006, 0.9960671, 0.9967547, 0.997799, 0.9981803,
      0.9980482, 0.997866, 0.9979395, 0.9983557, 0.9989184,
      0.9989055, 0.9990118, 0.9996161, 0.9995309, 0.9998025,
      0.999805, 0.9997229, 0.9993334, 0.9678256, 0.8499314,
      0.9065765, 0.9385365, 0.9748526, 0.9834889, 0.990516,
      0.9959404, 0.997568, 0.9972813, 0.997454, 0.9963427,
      0.9962894, 0.9941148, 0.9978181, 0.988986, 0.9942761,
      0.9883763, 0.9887566, 0.9783059, 0.9964556, 0.9989032,
      0.9987187, 0.9991513, 0.9985492, 0.9946861, 0.9927332,
      0.9921402, 0.9940308, 0.9917355, 0.9939995, 0.9946635,
      0.9906306, 0.9938821, 0.997996, 0.9986443, 0.9991835,
      0.9992285, 0.998767, 0.9984202, 0.9981189, 0.9975584,
      0.9986973, 0.9992679, 0.9986899, 0.9987592, 0.9995977,
      0.9996181, 0.9998004, 0.9997374, 0.9995306, 0.9991449,
      0.9776928, 0.8716559, 0.9076951, 0.9342051, 0.968978,
      0.9763333, 0.9913339, 0.9961016, 0.9960675, 0.9917222,
      0.9910569, 0.9892597, 0.978366, 0.9594393, 0.9880899,
      0.9431214, 0.9867439, 0.9791956, 0.9939417, 0.990828,
      0.9952778, 0.9986633, 0.9990327, 0.9991628, 0.9980478,
      0.989588, 0.9843704, 0.9848, 0.9913313, 0.9904789,
      0.9899643, 0.9947029, 0.9959865, 0.9985618, 0.9994602,
      0.998987, 0.9994266, 0.9994255, 0.9990025, 0.9984264).map(x => x.toFloat)))
    clsProb.resize(1, 50, 3, 2)

    val rpnBbox = Tensor(Storage(Array(0.0099106, 0.0340293, 0.0219177, -0.0097668, 0.0245331,
      0.0384757, 0.0485355, 0.0172907, -0.0215893, -0.0128879,
      -0.0346656, -0.042432, -0.0465798, -0.0190253, 0.0169258,
      0.0152242, -0.011799, 1.363E-4, 0.0279003, 0.0089927,
      -0.0392747, -0.0557612, 0.0060133, 0.0242736, -0.0192071,
      0.0522377, 0.0889788, -0.029835, -0.0637748, 0.0261266,
      -0.0016864, -0.0585554, -0.0498068, -0.0049075, -0.0156205,
      0.033692, 0.0604394, 0.0228101, -0.0197328, 0.0293771,
      0.0846031, 0.0720364, -0.0144814, -0.0650503, -0.0283915,
      0.011936, 0.0160937, 0.0228369, 0.0190957, 0.0129549,
      0.006265, 0.0421416, 0.0399448, 0.0438554, 0.0299251,
      0.0259405, 0.0396169, 0.0222482, 0.0419209, 0.0308257,
      -0.0378014, -0.0279518, -0.0454038, -0.1030128, -0.1079869,
      -0.0654441, 0.0050984, 0.0164489, 0.0059278, 0.0215301,
      0.0331593, -0.0075066, -0.0537513, -0.0288742, 0.0328395,
      0.0235303, -0.007965, 0.0924568, 0.1289005, -0.0330604,
      -0.0909799, -0.0014444, 0.0220151, -0.0370262, -0.0821856,
      -0.019577, -0.0013815, 0.0580363, 0.0665941, -0.0091318,
      -0.0311237, 0.0451086, 0.1205492, 0.1009534, -0.0060532,
      -0.0694432, -0.0735247, -0.0354994, 0.0060753, 0.0321801,
      0.0273445, -4.283E-4, -0.003351, 0.0547092, 0.0674881,
      0.0497338, 0.083247, 0.0630531, 0.0210866, -0.0104827,
      0.0286066, 0.0405411, -0.0521901, -0.0289642, -0.0405898,
      -0.1284813, -0.1341837, -0.0702383, 0.0091633, 0.0128026,
      0.0085729, 0.0386311, 0.0460507, -0.0162705, -0.0535294,
      -0.0156571, 7.72E-5, -0.0240781, 0.0285357, 0.1028609,
      0.1079066, -0.0091325, -0.078378, 2.321E-4, 0.0120954,
      -0.029296, -0.0669113, -0.0196446, 9.29E-5, 0.0327741,
      0.0134024, -0.0280508, -0.0182221, 0.067514, 0.1039958,
      0.0701716, 0.0037236, -0.0332003, -0.0926498, -0.1027899,
      -0.0272093, 0.0242397, 0.0145863, -0.0247301, -0.016075,
      0.0562058, 0.0997175, 0.0664253, 0.1032369, 0.0586791,
      0.0083133, -0.0039848, 0.0314366, 0.0271608, -0.0540225,
      -0.0312526, -0.0361745, -0.1221413, -0.1109654, -0.0497718,
      0.0031044, 0.0211726, 0.028536, 0.0543011, 0.0381879,
      -0.0520648, -0.0636152, -0.0312281, 0.0064568, -0.0073058,
      0.0085862, 0.0794196, 0.0535528, 0.0054177, -0.0282002,
      -0.0177802, -7.912E-4, 0.0028639, -0.0345362, -0.0600905,
      -0.0120724, 0.0135849, 0.0164432, -0.0188344, -0.0278639,
      0.0363594, 0.0868278, 0.0253591, -0.0137046, -0.008266,
      -0.0857791, -0.1508749, -0.0587328, 0.0166358, 0.0041356,
      -0.0450859, -0.0336221, 0.0494447, 0.104129, 0.0588888,
      0.0753552, 0.0424647, 0.0304938, 0.0244688, 0.0231844,
      0.0097709, -0.0364989, 0.0051442, -0.0017752, -0.0548559,
      -0.0392321, -0.0056783, 0.0303314, 0.0188818, 0.0039482,
      0.0217683, 0.0485664, -0.0310363, -0.0674896, -0.0490904,
      -0.0214165, -0.0475353, -0.0376432, 0.0322022, 0.0103737,
      0.0207583, 0.0031239, -0.0188835, -0.0085879, 0.0178114,
      -0.0097981, -0.0529456, -0.0131738, -0.0033328, -0.0017205,
      -0.0111964, -0.0458342, -0.0040865, 0.0861826, -0.008814,
      -0.0264596, 0.0284776, -0.0424494, -0.1330752, -0.0610023,
      -0.0020196, -0.0059959, -0.0403897, -0.0440721, 0.0516697,
      0.081363, 0.036531, 0.0326365, 0.0287277, 0.0442011,
      0.0306731, 0.0144948, 0.0279155, 0.0286187, 0.0412287,
      0.0210752, -0.0201808, -0.0051145, -0.0240297, -0.0246083,
      0.0012415, 0.005037, 0.0267491, 0.037527, 0.0048627,
      -0.0327046, -0.0336906, -0.022042, -0.0524443, -0.0609144,
      0.0284458, 0.0354372, 0.038617, 0.0050819, -0.0437237,
      -0.0049428, 0.0258992, -0.0066797, -0.0647706, -0.0193386,
      -0.0105213, -0.0164336, -0.0077392, -0.0609664, -0.0269277,
      0.0721946, -0.0145722, -0.0053495, 0.0307894, -0.0303821,
      -0.1104808, -0.0499787, 0.0019177, 0.0054293, -0.0327141,
      -0.0625737, 0.0557275, 0.0662891, 0.0324403, 0.0301771,
      -7.25E-5, -0.0280415, 0.0102093, -0.0027244, 0.0293341,
      0.0399442, -0.0029941, -2.975E-4, -0.0140946, -0.0020883,
      -0.026326, -0.027647, -0.0039398, 0.0170945, 0.0360753,
      0.0227452, -0.0168755, -0.0394971, -0.004896, -0.0073594,
      -0.0437222, -0.0842772, 0.0115126, 0.0601074, 0.0430571,
      0.0102567, -0.0545648, -0.0051187, 0.0271124, 0.0087335,
      -0.0594697, -0.0454484, -0.009625, -0.0274849, -0.0227772,
      -0.059643, -0.0320014, 0.0508326, -0.0162658, 0.0029535,
      -0.0130879, -0.0691385, -0.1084216, -0.0538385, -0.0041127,
      0.0042932, -0.0289781, -0.0586778, 0.0491756, 0.0403854,
      0.0285223, 0.0610282, 0.0364454, -0.018923, -3.898E-4,
      -0.0353772, 0.0066331, 0.0291213, -0.0135795, 0.0116469,
      0.013117, -0.0224221, -0.0630284, -0.0211395, 0.0093686,
      0.0334043, 0.0444054, 0.0135264, -0.0532857, -0.0700574,
      -0.0160417, -0.0053624, -0.0505025, -0.0717818, -0.0185721,
      0.0373709, 0.0167453, 0.0121419, -0.0329561, -0.0288867,
      0.032562, 0.0095824, -0.0387242, -0.0367124, 0.0059553,
      -0.0118921, -0.0395103, -0.0610817, -0.0154446, 0.0227383,
      -0.0203015, -0.0118163, -0.0347077, -0.0780342, -0.0958158,
      -0.0627819, -0.0021059, 0.004405, -0.0116138, -0.0262205,
      0.0423293, -0.0167961, 0.0462295, 0.0685954, 0.0530842,
      0.0316721, 0.0191148, -0.0459165, -0.0189744, -0.0072112,
      -0.0146565, 0.04684, 0.0185591, -0.0301039, -0.0475041,
      -0.0053906, 0.0145717, 0.0352783, 0.0585247, 0.0150419,
      -0.0548029, -0.0755114, -0.0869602, -0.0289258, -0.0311533,
      -0.023882, -0.0335448, -0.0351293, 0.0272844, 0.0397942,
      -0.0084095, -0.0440212, 6.489E-4, 0.0043786, -0.0597942,
      -0.0460533, -0.0151083, -0.0302843, -0.0811177, -0.0679024,
      -0.0248189, -0.0029582, -0.0097882, -0.0065283, 0.0086536,
      -0.0391871, -0.07014, -0.0471639, -0.0049278, 0.0107473,
      -0.0131628, -0.0221043, 0.0142911, -0.0175938, 0.0714112,
      0.0351761, 0.0106472, 0.0159183, 0.0083669, -0.0348392,
      -0.0167584, -0.0191659, -0.011779, 0.0515498, 0.0040429,
      -0.0434144, -0.0424425, -0.0130523, 0.0099673, 0.0419745,
      0.0691993, 0.0177033, -0.0627066, -0.0914821, -0.1182156,
      -0.0791037, -0.0237736, 0.0034799, -0.0304526, -0.0420338,
      0.0510367, 0.0477485, 0.0204928, -0.0322523, -0.0237057,
      0.0130436, -0.0596541, -0.0609109, -0.0287378, -0.0105089,
      -0.0452681, -0.0467576, -0.0365186, -0.0259871, -0.0085955,
      0.0148585, 0.0327806, 0.0017381, -0.0612378, -0.0484439,
      0.0095945, 0.0308313, -0.0294827, -0.0254539, 0.0166846,
      -0.0050418, 0.0887013, 0.048419, 0.0037149, -0.012312,
      -0.0245411, -0.0223115, -0.0254558, -0.0194541, 0.0097896,
      0.0486087, -0.0056137, -0.0501434, -0.0520687, -0.0174583,
      0.0034549, 0.0241276, 0.058923, 0.0065142, -0.0687003,
      -0.0989736, -0.1161314, -0.0825568, -0.0099112, -0.0025992,
      -0.0208181, -0.0213606, 0.0481685, 0.0427102, 0.044187,
      -0.0166085, -0.0402887, -0.0028921, -0.0436363, -0.0655978,
      -0.0234114, 0.0055859, -0.0252559, -0.0490375, -0.0297361,
      0.003479, 0.0024989, 0.0162959, -0.0044418, -0.0208201,
      -0.0383094, -0.0534894, -0.0036336, 0.0320769, -0.0262698,
      -0.0321757, 0.0105434, 0.0056298, 0.0548085, 0.0458507,
      0.0081813, -0.0441113, -0.0418268, -0.0020359, -0.0081481,
      -0.0208392, 0.0139829, 0.033038, -0.0030298, -0.0564098,
      -0.0767444, -0.0364198, -0.0159002, 0.0218226, 0.0596395,
      0.0216503, -0.0472133, -0.0816287, -0.0706095, -0.0636514,
      -0.0132416, -0.0314155, -0.0066373, 0.0145643, 0.0632967).map(x => x.toFloat)))
    rpnBbox.resize(1, 100, 3, 2)

    val iminfo = Tensor(Storage(Array(640.0f, 832.0f, 1.664f, 1.70667f)))
    input.insert(clsProb)
    input.insert(rpnBbox)
    input.insert(iminfo)
    val out = proposal.forward(input)
    val expectedRois = Tensor(Storage(Array(0, 0, 6.5122643, 58.3553467, 40.5598030,
      0, 0, 0, 331.9627075, 228.2176819,
      0, 0, 0, 66.5950470, 141.8633270,
      0, 0, 20.6434708, 43.7881165, 56.8606033,
      0, 0, 0, 213.3438873, 134.2229156,
      0, 0, 0, 56.5291405, 108.3077240,
      0, 0, 0, 60.1978531, 26.7850609,
      0, 0, 0, 123.5599213, 151.5422974,
      0, 0, 0, 41.6136780, 28.2565536,
      0, 0, 0, 172.3558044, 361.5516357,
      0, 6.8034935, 11.9547100, 43.4212494, 68.8412552,
      0, 0, 7.4688168, 28.6426659, 68.2859116,
      0, 0, 0, 170.9194641, 114.7921219,
      0, 0, 0, 41.9110298, 68.9292908,
      0, 6.1603832, 0, 45.6753159, 55.3387985,
      0, 0, 0, 105.2733154, 215.8822937,
      0, 0, 0, 60.2673721, 69.0898895,
      0, 0, 0, 103.5099258, 73.0711441,
      0, 0, 0, 122.1881104, 98.4453583,
      0, 0, 0, 76.2459030, 51.6101913,
      0, 0, 0, 237.8263550, 331.8286743,
      0, 0, 9.8681488, 71.4265976, 78.8999634,
      0, 0, 0, 39.1188927, 98.1491547,
      0, 0, 0, 78.9040909, 94.0255356,
      0, 0, 25.0604725, 32.8465843, 63.3562469,
      0, 3.6328640, 0, 42.1068420, 40.4691010,
      0, 0, 0, 28.2436485, 41.0341644,
      0, 0, 2.1024132, 29.9473648, 54.1711159,
      0, 0, 0, 101.8007812, 37.5167465).map(x => x.toFloat))).resize(29, 5)

    out[Tensor[Float]](1) should be(expectedRois)
  }
}
