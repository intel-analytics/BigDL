/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.intel.analytics.sparkdl.nn.mkl

import com.intel.analytics.sparkdl.nn
import com.intel.analytics.sparkdl.nn.{Constant, Default, Xavier}
import com.intel.analytics.sparkdl.tensor.TensorNumericMath.TensorNumeric
import com.intel.analytics.sparkdl.tensor.{Storage, Tensor}
import org.scalatest.{FlatSpec, Matchers}

import scala.collection.mutable.ArrayBuffer
import scala.reflect.ClassTag

class SpatialConvolutionSpec extends FlatSpec with Matchers {
/*  "SpatialConvolution forward and backward ten times" should "generate correct results" in {
    /*
     * Currently, we compare the output, gradient weight, gradient bias, gradient input
     * generated by SparkDL-MKLDNN to SparkDL-MKLBlas. The target is that the cumulative
     * error should not be more than threshold.
     */
    def test[T: ClassTag]()(implicit ev: TensorNumeric[T]): Unit = {
      val convBlas = new nn.SpatialConvolution[T](192, 64, 1, 1, 1, 1, 0, 0).setInitMethod(Xavier)
      val convDnn = new SpatialConvolution[T](192, 64, 1, 1, 1, 1, 0, 0).setInitMethod(Xavier)
      convBlas.reset()

      val paraDnn = convDnn.parameters()
      val paraBlas = convBlas.parameters()
      for (i <- 0 until paraDnn._1.length) {
        paraDnn._1(i).copy(paraBlas._1(i))
      }

      for (i <- 0 until 5) {
        val input = Tensor[T](Array(32, 192, 28, 28)).rand()
        val gradOutput = Tensor[T](Array(32, 64, 28, 28)).rand()

        val outputDnn = convDnn.updateOutput(input)
        val outputBlas = convBlas.updateOutput(input)
        outputDnn should be equals (outputBlas)

        val gradInputDnn = convDnn.backward(input, gradOutput)
        val gradInputBlas = convBlas.backward(input, gradOutput)
        gradInputDnn should be equals (gradInputBlas)

        /*
         * Attention:
         *
         * 1. Because of some unknown reason, the cumulative error of gradient weight,
         *    gradient bias and output can't close to 1e-6. So we set the error to
         *
         *    output | -1 ~ +1
         *    gradient weight | -1000 ~ 1000
         *    gradient bias | -100 ~ 100
         *    gradient input | -1e6 ~ 1e6
         *
         * 2. Compare with IntelCaffe with mkl-dnn (2016-10-10), the cumulative error
         *    of SparkDL is as same as IntelCaffe with MKL2017, althrough we have not
         *    integrated IntelCaffe like Torch.
         */
        Tools.cumulativeError[T](outputDnn, outputBlas, "output") should be(0.0 +- 1e-6)
        Tools.cumulativeError[T](gradInputDnn, gradInputBlas, "gradient input") should be(
          0.0 +- 1e-6)
        Tools.cumulativeError[T](convBlas.gradWeight, convDnn.gradWeight, "gradient weight")
        Tools.cumulativeError[T](convBlas.gradBias, convDnn.gradBias, "gradient bias")
      }
    }

    for (i <- 0 until Tools.getRandTimes()) {
      test[Float]()
    }
  }

  "AlexNet convolution output" should "right" in {
    def test[T: ClassTag]()(implicit ev: TensorNumeric[T]): Unit = {
      val convBlas = new nn.SpatialConvolution[T](96, 256, 5, 5, 1, 1, 2, 2).setInitMethod(Xavier)
      val convDnn = new SpatialConvolution[T](96, 256, 5, 5, 1, 1, 2, 2).setInitMethod(Xavier)
      convBlas.reset()
      convDnn.reset()

      val paraDnn = convDnn.parameters()
      val paraBlas = convBlas.parameters()
      for (i <- 0 until paraDnn._1.length) {
        paraDnn._1(i).copy(paraBlas._1(i))
      }

      for (i <- 0 until 5) {
        val input = Tensor[T](Array(4, 96, 27, 27)).rand()

        val outputDnn = convDnn.updateOutput(input)
        val outputBlas = convBlas.updateOutput(input)
        outputDnn should be equals (outputBlas)

        /* TODO This output cumulative error closes to 0.1 ~ 0.5, and
         *      average error closes to 1e-7. The average of output is 1e-2. */
        Tools.averageAll(outputDnn, msg = "output of dnn")
        Tools.averageError[T](outputDnn, outputBlas, "output") should be(0.0 +- 1e-6)
      }
    }

    for (i <- 0 until Tools.getRandTimes()) {
      test[Float]()
    }
  }

  "SpatialConvolution compare with IntelCaffe with MKL-DNN" should "generate correct result" in {
    val modelDnn = new SpatialConvolution[Float](3, 64, 3, 3, 1, 1, 1, 1).setInitMethod(Xavier)
    val modelBlas = new nn.SpatialConvolution[Float](3, 64, 3, 3, 1, 1, 1, 1).setInitMethod(Xavier)

    val input = Tools.getTensorFloat("input", Array(128, 3, 32, 32))
    val weights = Tools.getTensorFloat("weights", Array(1, 64, 3, 3, 3))
    val bias = Tools.getTensorFloat("bias", Array(64))

    modelDnn.weight.set(weights)
    modelDnn.bias.set(bias)
    modelBlas.weight.set(weights)
    modelBlas.bias.set(bias)

    modelDnn.forward(input)
    modelBlas.forward(input)

    val output = Tools.getTensorFloat("output", modelDnn.output.size())

    Tools.printTensor(modelDnn.output, msg = "dnn output")
    Tools.printTensor(output, msg = "caffe output")
    Tools.averageAll(modelDnn.output, "dnn output")
    Tools.averageAll(output, "caffe output")

    val gradOutput = Tools.getTensorFloat("gradOutput", output.size())
    val gradInput = Tools.getTensorFloat("gradInput", input.size())

    modelDnn.backward(input, gradOutput)
    modelBlas.backward(input, gradOutput)

    Tools.printTensor(modelDnn.gradInput, msg = "dnn gradinput")
    Tools.printTensor(gradInput, msg = "blas gradinput")
    Tools.averageAll(modelDnn.gradInput, "dnn gradient input")
    Tools.averageAll(gradInput, "blas gradient input")

    val gradWeight = Tools.getTensorFloat("gradWeight", weights.size())
    val gradBias = Tools.getTensorFloat("gradBias", bias.size())

    Tools.cumulativeError(modelDnn.output, output, "output") should be(0.0 +- 1e-6)
    Tools.cumulativeError(modelDnn.gradInput, gradInput, "gradient input") should be(0.0 +- 1e-6)
    Tools.cumulativeError(modelDnn.gradWeight, gradWeight, "gradWeight") should be(0.0)
    Tools.cumulativeError(modelDnn.gradBias, gradBias, "gradBias") should be(0.0)

    Tools.cumulativeError(modelDnn.output, modelBlas.output, "output")
    Tools.cumulativeError(modelDnn.gradInput, modelBlas.gradInput, "gradient input")
  }

  "SpatialConvolution 8 512 2 2" should "generate correct result" in {
    val modelDnn =
      new SpatialConvolution[Float](512, 512, 3, 3, 1, 1, 1, 1).setInitMethod(Constant)
    val modelBlas =
      new nn.SpatialConvolution[Float](512, 512, 3, 3, 1, 1, 1, 1).setInitMethod(Constant)
    modelDnn.reset()
    modelBlas.reset()

    val input = Tensor[Float](Array(8, 512, 2, 2)).rand()

    val outputDnn = modelDnn.forward(input)
    val outputBlas = modelBlas.forward(input)

    val outputCaffe = Tools.getTensorFloat("output", outputDnn.size())
    Tools.cumulativeError(outputDnn, outputCaffe, "output compare with caffe") should be(0.0)

    Tools.averageAll(outputDnn, msg = "output dnn")
    Tools.averageAll(outputBlas, msg = "output dnn")
    Tools.cumulativeError(outputDnn, outputBlas, "output") should be(0.0 +- 1e-6)
  }*/

  import scala.sys.process._
  val cmd1 = "/home/wyz/workspace/caffe.intel/build/tools/test_convolution "

  val testCases = List(
    TestCase(512, 512, 3, 3, 1, 1, 1, 1, 1, 2, 2, 8),

    // AlexNet
    TestCase(3, 96, 11, 11, 4, 4, 0, 0, 1, 227, 227, 8),
    TestCase(96, 256, 5, 5, 1, 1, 2, 2, 1, 27, 27, 8),
    TestCase(256, 384, 3, 3, 1, 1, 1, 1, 1, 13, 13, 8),
    TestCase(384, 384, 3, 3, 1, 1, 1, 1, 1, 13, 13, 8),
    TestCase(384, 256, 3, 3, 1, 1, 1, 1, 1, 13, 13, 8),

    // With 2 groups
    TestCase(96, 256, 5, 5, 1, 1, 2, 2, 2, 27, 27, 8),
    TestCase(384, 384, 3, 3, 1, 1, 1, 1, 2, 13, 13, 8),
    TestCase(384, 256, 3, 3, 1, 1, 1, 1, 2, 13, 13, 8),

    // GoogleNet v1
    TestCase(3, 64, 7, 7, 2, 2, 3, 3, 1, 224, 224, 8),
    TestCase(64, 64, 1, 1, 1, 1, 0, 0, 1, 56, 56, 8),
    TestCase(64, 192, 3, 3, 1, 1, 1, 1, 1, 56, 56, 8),
    TestCase(192, 64, 1, 1, 1, 1, 0, 0, 1, 28, 28, 8),
    TestCase(192, 96, 1, 1, 1, 1, 0, 0, 1, 28, 28, 8),
    TestCase(96, 128, 3, 3, 1, 1, 1, 1, 1, 28, 28, 8),
    TestCase(192, 16, 1, 1, 1, 1, 0, 0, 1, 28, 28, 8),
    TestCase(16, 32, 5, 5, 1, 1, 2, 2, 1, 28, 28, 8),
    TestCase(192, 32, 1, 1, 1, 1, 0, 0, 1, 28, 28, 8),
    TestCase(256, 128, 1, 1, 1, 1, 0, 0, 1, 28, 28, 8),
    TestCase(128, 192, 3, 3, 1, 1, 1, 1, 1, 28, 28, 8),
    TestCase(256, 32, 1, 1, 1, 1, 0, 0, 1, 28, 28, 8),
    TestCase(32, 96, 5, 5, 1, 1, 2, 2, 1, 28, 28, 8),
    TestCase(256, 64, 1, 1, 1, 1, 0, 0, 1, 28, 28, 8),
    TestCase(480, 192, 1, 1, 1, 1, 0, 0, 1, 14, 14, 8),
    TestCase(480, 96, 1, 1, 1, 1, 0, 0, 1, 14, 14, 8),
    TestCase(96, 208, 3, 3, 1, 1, 1, 1, 1, 14, 14, 8),
    TestCase(480, 16, 1, 1, 1, 1, 0, 0, 1, 14, 14, 8),
    TestCase(16, 16, 5, 5, 1, 1, 2, 2, 1, 14, 14, 8),
    TestCase(16, 48, 5, 5, 1, 1, 2, 2, 1, 14, 14, 8),
    TestCase(480, 64, 1, 1, 1, 1, 0, 0, 1, 14, 14, 8),
    TestCase(512, 160, 1, 1, 1, 1, 0, 0, 1, 14, 14, 8),
    TestCase(512, 112, 1, 1, 1, 1, 0, 0, 1, 14, 14, 8),
    TestCase(112, 224, 3, 3, 1, 1, 1, 1, 1, 14, 14, 8),
    TestCase(512, 24, 1, 1, 1, 1, 0, 0, 1, 14, 14, 8),
    TestCase(24, 64, 5, 5, 1, 1, 2, 2, 1, 14, 14, 8),
    TestCase(512, 64, 1, 1, 1, 1, 0, 0, 1, 14, 14, 8),
    TestCase(512, 128, 1, 1, 1, 1, 0, 0, 1, 14, 14, 8),
    TestCase(128, 256, 3, 3, 1, 1, 1, 1, 1, 14, 14, 8),
    TestCase(512, 144, 1, 1, 1, 1, 0, 0, 1, 14, 14, 8),
    TestCase(144, 288, 3, 3, 1, 1, 1, 1, 1, 14, 14, 8),
    TestCase(512, 32, 1, 1, 1, 1, 0, 0, 1, 14, 14, 8),
    TestCase(32, 64, 5, 5, 1, 1, 2, 2, 1, 14, 14, 8),
    TestCase(528, 256, 1, 1, 1, 1, 0, 0, 1, 14, 14, 8),
    TestCase(528, 160, 1, 1, 1, 1, 0, 0, 1, 14, 14, 8),
    TestCase(160, 320, 3, 3, 1, 1, 1, 1, 1, 14, 14, 8),
    TestCase(528, 32, 1, 1, 1, 1, 0, 0, 1, 14, 14, 8),
    TestCase(32, 128, 5, 5, 1, 1, 2, 2, 1, 14, 14, 8),
    TestCase(528, 128, 1, 1, 1, 1, 0, 0, 1, 14, 14, 8),
    TestCase(832, 256, 1, 1, 1, 1, 0, 0, 1, 7, 7, 8),
    TestCase(832, 160, 1, 1, 1, 1, 0, 0, 1, 7, 7, 8),
    TestCase(832, 32, 1, 1, 1, 1, 0, 0, 1, 7, 7, 8),
    TestCase(832, 128, 1, 1, 1, 1, 0, 0, 1, 7, 7, 8),
    TestCase(832, 384, 1, 1, 1, 1, 0, 0, 1, 7, 7, 8),
    TestCase(832, 192, 1, 1, 1, 1, 0, 0, 1, 7, 7, 8),
    TestCase(192, 384, 3, 3, 1, 1, 1, 1, 1, 7, 7, 8),
    TestCase(832, 48, 1, 1, 1, 1, 0, 0, 1, 7, 7, 8),
    TestCase(48, 128, 5, 5, 1, 1, 2, 2, 1, 7, 7, 8),
    TestCase(512, 128, 1, 1, 1, 1, 0, 0, 1, 4, 4, 8),

    // GoogleNet v2
    TestCase(64, 64, 3, 3, 1, 1, 1, 1, 1, 28, 28, 8),
    TestCase(64, 96, 3, 3, 1, 1, 1, 1, 1, 28, 28, 8),
    TestCase(96, 96, 3, 3, 1, 1, 1, 1, 1, 28, 28, 8),
    TestCase(320, 128, 1, 1, 1, 1, 0, 0, 1, 28, 28, 8),
    TestCase(128, 160, 3, 3, 2, 2, 1, 1, 1, 28, 28, 8),
    TestCase(320, 64, 1, 1, 1, 1, 0, 0, 1, 28, 28, 8),
    TestCase(96, 96, 3, 3, 2, 2, 1, 1, 1, 28, 28, 8),
    TestCase(576, 224, 1, 1, 1, 1, 0, 0, 1, 14, 14, 8),
    TestCase(576, 64, 1, 1, 1, 1, 0, 0, 1, 14, 14, 8),
    TestCase(576, 128, 1, 1, 1, 1, 0, 0, 1, 14, 14, 8),
    TestCase(576, 192, 1, 1, 1, 1, 0, 0, 1, 14, 14, 8),
    TestCase(576, 96, 1, 1, 1, 1, 0, 0, 1, 14, 14, 8),
    TestCase(96, 128, 3, 3, 1, 1, 1, 1, 1, 14, 14, 8),
    TestCase(128, 128, 3, 3, 1, 1, 1, 1, 1, 14, 14, 8),
    TestCase(576, 160, 1, 1, 1, 1, 0, 0, 1, 14, 14, 8),
    TestCase(128, 160, 3, 3, 1, 1, 1, 1, 1, 14, 14, 8),
    TestCase(160, 160, 3, 3, 1, 1, 1, 1, 1, 14, 14, 8),
    TestCase(128, 192, 3, 3, 1, 1, 1, 1, 1, 14, 14, 8),
    TestCase(160, 192, 3, 3, 1, 1, 1, 1, 1, 14, 14, 8),
    TestCase(192, 192, 3, 3, 1, 1, 1, 1, 1, 14, 14, 8),
    TestCase(128, 192, 3, 3, 2, 2, 1, 1, 1, 14, 14, 8),
    TestCase(192, 256, 3, 3, 1, 1, 1, 1, 1, 14, 14, 8),
    TestCase(256, 256, 3, 3, 2, 2, 1, 1, 1, 14, 14, 8),
    TestCase(192, 320, 3, 3, 1, 1, 1, 1, 1, 7, 7, 8),
    TestCase(1024, 160, 1, 1, 1, 1, 0, 0, 1, 7, 7, 8),
    TestCase(160, 224, 3, 3, 1, 1, 1, 1, 1, 7, 7, 8),
    TestCase(224, 224, 3, 3, 1, 1, 1, 1, 1, 7, 7, 8),
    TestCase(1024, 128, 1, 1, 1, 1, 0, 0, 1, 7, 7, 8),
    TestCase(1024, 352, 1, 1, 1, 1, 0, 0, 1, 7, 7, 8),
    TestCase(1024, 192, 1, 1, 1, 1, 0, 0, 1, 7, 7, 8),
    TestCase(192, 224, 3, 3, 1, 1, 1, 1, 1, 7, 7, 8),
    TestCase(1024, 128, 1, 1, 1, 1, 0, 0, 1, 2, 2, 8),
    TestCase(576, 128, 1, 1, 1, 1, 0, 0, 1, 4, 4, 8),

    // VggLike
    TestCase(3, 64, 3, 3, 1, 1, 1, 1, 1, 32, 32, 128),
    TestCase(64, 64, 3, 3, 1, 1, 1, 1, 1, 32, 32, 128),
    TestCase(64, 128, 3, 3, 1, 1, 1, 1, 1, 16, 16, 128),
    TestCase(128, 128, 3, 3, 1, 1, 1, 1, 1, 16, 16, 128)
  )

  for (test <- testCases) {
    "A SpatialConvolution" should s"with parameters " +
                                  s"${test.nInputPlane}, ${test.nOutputPlane}, ${test.kW}, ${test.kH}" +
                                  ", " + s"${test.dW}, ${test.dH}, ${test.padW}, ${test.padH}" +
                                  ", " + s"${test.inputWidth}, ${test.inputHeight}" in {
      val model = new SpatialConvolution[Float](test.nInputPlane, test.nOutputPlane,
                                                test.kW, test.kH, test.dW, test.dH,
                                                test.padW, test.padH, test.group)
        .setUseOpenMp(false)

      val cmd = (cmd1, test.batchSize, test.nInputPlane, test.inputHeight, test.inputWidth,
                test.kH, test.kW, test.dH, test.dW, test.padH, test.padW, test.group,
                test.nOutputPlane)
                .productIterator
                .mkString(" ")

      println(cmd)
      val ret = cmd.!!
      println(ret)
      val pid = Tools.getPidFromString(ret)

      val input = Tools.getTensorFloat("input", Array(test.batchSize, test.nInputPlane,
                                                      test.inputWidth, test.inputHeight), pid)
      val weights = Tools.getTensorFloat("weights", model.weight.size(), pid)
      val bias = Tools.getTensorFloat("bias", Array(test.nOutputPlane), pid)

      model.weight.set(weights)
      model.bias.set(bias)

      model.forward(input)

      val output = Tools.getTensorFloat("output", model.output.size(), pid)

      val gradOutput = Tools.getTensorFloat("gradOutput", output.size(), pid)
      val gradInput = Tools.getTensorFloat("gradInput", input.size(), pid)

      model.zeroGradParameters()
      model.backward(input, gradOutput)

      val gradWeight = Tools.getTensorFloat("gradWeight", weights.size(), pid)
      val gradBias = Tools.getTensorFloat("gradBias", bias.size(), pid)

      Tools.cumulativeError(model.output, output, "output") should be(0.0)
      Tools.cumulativeError(model.gradInput, gradInput, "gradient input") should be(0.0)
      Tools.cumulativeError(model.gradWeight, gradWeight, "gradWeight") should be(0.0)
      Tools.cumulativeError(model.gradBias, gradBias, "gradBias") should be(0.0)
    }
  }

  case class TestCase(nInputPlane : Int, nOutputPlane : Int, kW : Int, kH : Int,
                      dW : Int, dH : Int, padW : Int, padH : Int, group: Int,
                      inputWidth : Int, inputHeight : Int, batchSize : Int)
}
